cmake_minimum_required(VERSION 3.5.0)
project(pcs_detection VERSION 0.1.0 LANGUAGES CXX)

find_package(console_bridge REQUIRED)
find_package(PCL REQUIRED)
find_package(OpenCV REQUIRED)

list(FIND CMAKE_CXX_COMPILE_FEATURES cxx_std_11 CXX_FEATURE_FOUND)

###########
## Build ##
###########

add_library(${PROJECT_NAME}_hsv_thresholding INTERFACE)
target_link_libraries(${PROJECT_NAME}_hsv_thresholding INTERFACE console_bridge ${OpenCV_LIBS})
target_compile_options(${PROJECT_NAME}_hsv_thresholding INTERFACE -Wsuggest-override -Wconversion -Wsign-conversion)
if(CXX_FEATURE_FOUND EQUAL "-1")
    target_compile_options(${PROJECT_NAME}_hsv_thresholding INTERFACE -std=c++11)
else()
    target_compile_features(${PROJECT_NAME}_hsv_thresholding INTERFACE cxx_std_11)
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(${PROJECT_NAME}_hsv_thresholding INTERFACE -mno-avx)
  else()
    message(WARNING "Non-GNU compiler detected. If using AVX instructions, Eigen alignment issues may result.")
  endif()
target_include_directories(${PROJECT_NAME}_hsv_thresholding INTERFACE
    "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
    "$<INSTALL_INTERFACE:include>")
target_include_directories(${PROJECT_NAME}_hsv_thresholding SYSTEM INTERFACE
    ${OpenCV_INCLUDE_DIRS})

list (APPEND PACKAGE_LIBRARIES ${PROJECT_NAME}_hsv_thresholding)

add_library(${PROJECT_NAME}_point_cloud_annotator SHARED src/${PROJECT_NAME}/point_cloud_annotator.cpp)
target_link_libraries(${PROJECT_NAME}_point_cloud_annotator PUBLIC  console_bridge ${PCL_LIBRARIES} ${OpenCV_LIBS})
target_compile_options(${PROJECT_NAME}_point_cloud_annotator PRIVATE -Wsuggest-override -Wconversion -Wsign-conversion)
if(CXX_FEATURE_FOUND EQUAL "-1")
    target_compile_options(${PROJECT_NAME}_point_cloud_annotator PUBLIC -std=c++11)
else()
    target_compile_features(${PROJECT_NAME}_point_cloud_annotator PUBLIC cxx_std_11)
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(${PROJECT_NAME}_point_cloud_annotator PUBLIC -mno-avx)
  else()
    message(WARNING "Non-GNU compiler detected. If using AVX instructions, Eigen alignment issues may result.")
  endif()
target_include_directories(${PROJECT_NAME}_point_cloud_annotator PUBLIC
    "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
    "$<INSTALL_INTERFACE:include>")
target_include_directories(${PROJECT_NAME}_point_cloud_annotator SYSTEM PUBLIC
    ${PCL_INCLUDE_DIRS}
    ${OpenCV_INCLUDE_DIRS})

list (APPEND PACKAGE_LIBRARIES ${PROJECT_NAME}_point_cloud_annotator)



#############
## Python ##
#############
add_subdirectory(src_python)

#############
## Install ##
#############
# Mark executables and/or libraries for installation
install(TARGETS ${PACKAGE_LIBRARIES}
    EXPORT ${PROJECT_NAME}-targets DESTINATION lib)
install(EXPORT ${PROJECT_NAME}-targets
    NAMESPACE pcs:: DESTINATION lib/cmake/${PROJECT_NAME})

# Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}
  DESTINATION include
  FILES_MATCHING
    PATTERN "*.h"
    PATTERN "*.hpp"
    PATTERN ".svn" EXCLUDE
 )

install(FILES package.xml DESTINATION share/${PROJECT_NAME})

# Create cmake config files
include(CMakePackageConfigHelpers)
configure_package_config_file(
    ${CMAKE_CURRENT_LIST_DIR}/cmake/${PROJECT_NAME}-config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
    INSTALL_DESTINATION lib/cmake/${PROJECT_NAME}
    NO_CHECK_REQUIRED_COMPONENTS_MACRO)

write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
    VERSION ${PROJECT_VERSION} COMPATIBILITY ExactVersion)

install(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
    DESTINATION lib/cmake/${PROJECT_NAME})

export(EXPORT ${PROJECT_NAME}-targets
    FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-targets.cmake)



#############
## Test ##
#############
if (ENABLE_TESTS)
  set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules)
  if(ENABLE_COVERAGE_TESTING)
    include(CodeCoverage)
    APPEND_COVERAGE_COMPILER_FLAGS()
  endif()

  enable_testing()
  add_custom_target(run_tests ALL
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
      COMMAND ${CMAKE_CTEST_COMMAND} -V -O "/tmp/${PROJECT_NAME}_ctest.log" -C ${CONFIGURATION})
#    add_custom_target(run_tests ALL
#        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
#        )

  add_subdirectory(test)


###################
## Code Coverage ##
###################



  if(ENABLE_COVERAGE_TESTING)
#      set(COVERAGE_EXCLUDES "*/${PROJECT_NAME}/test*")
      SETUP_TARGET_FOR_COVERAGE_LCOV(NAME ${PROJECT_NAME}_coverage
                                     EXECUTABLE ${PROJECT_NAME}_point_cloud_annotator -j 4
                                     )

  endif() #ENABLE_COVERAGE_TESTING
endif()

